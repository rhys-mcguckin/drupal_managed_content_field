<?php

use Drupal\Core\Routing\RouteMatchInterface;

/**
 * Implements hook_help().
 */
function managed_content_field_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the managed_content_field module.
    case 'help.page.managed_content_field':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Provides a field for managing content lifecycle.') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_field_formatter_info_alter().
 */
function managed_content_field_field_formatter_info_alter(array &$info) {
  foreach ($info as $name => $widget_info) {
    if (!empty($widget_info['field_types']) && in_array('entity_reference', $widget_info['field_types'])) {
      $info[$name]['field_types'][] = 'managed_content';
    }
  }
}

/**
 * Implements hook_theme().
 */
function managed_content_field_theme() {
  return array(
    'managed_content' => array(
      'render element' => 'elements',
      'template' => 'managed-content',
    ),
    'managed_content_dropbutton_wrapper' => array(
      'variables' => array('children' => NULL),
      'template' => 'managed-content-dropbutton-wrapper',
    ),
    'managed_content_info_icon' => [
      'variables' => [
        'message' => NULL,
        'icon' => NULL,
      ],
      'template' => 'managed-content-info-icon',
    ],
    'managed_content_actions' => [
      'render element' => 'element',
      'template' => 'managed-content-actions',
    ],
    'managed_content_summary' => [
      'render element' => 'element',
      'template' => 'managed-content-summary',
    ],
  );
}

/**
 * Prepares variables for managed_content_actions component.
 *
 * Default template: managed-content-actions.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - actions: An array of default action buttons.
 *   - dropdown_actions: An array of buttons for dropdown.
 */
function template_preprocess_managed_content_actions(&$variables) {
  // Define variables for the template.
  $variables += ['actions' => [], 'dropdown_actions' => []];

  $element = $variables['element'];

  if (!empty($element['actions'])) {
    $variables['actions'] = $element['actions'];
  }

  if (!empty($element['dropdown_actions'])) {
    $variables['dropdown_actions'] = $element['dropdown_actions'];
  }
}

/**
 * Prepares variables for managed-content-summary component.
 *
 * Default template: managed-content-summary.html.twig
 *
 * @param array $variables
 *   An associative array containing:
 *   - buttons: An array of buttons to display in the modal form.
 */
function template_preprocess_managed_content_summary(&$variables) {
  $variables['content'] = $variables['element']['#summary']['content'];
  $variables['behaviors'] = $variables['element']['#summary']['behaviors'];
  $variables['expanded'] = !empty($variables['element']['#expanded']);
}

/**
 * Implements hook_preprocess_HOOK() for field_multiple_value_form().
 */
function managed_content_field_preprocess_field_multiple_value_form(&$variables) {
  if (!empty($variables['table']['#header']) && isset($variables['table']['#rows'])) {
    // Find managed_actions and move to header.
    // @see template_preprocess_field_multiple_value_form()
    if (!empty($variables['table']['#rows'][0]['data'][1]['data']['#managed_content_header'])) {
      $variables['table']['#header'][0]['data'] = [
        'title' => $variables['table']['#header'][0]['data'],
        'button' => $variables['table']['#rows'][0]['data'][1]['data'],
      ];
      unset($variables['table']['#rows'][0]);
    }

    // Add the managed content type as a class to every row.
    if (isset($variables['element']['#managed_content_widget'])) {
      foreach ($variables['table']['#rows'] as $key => $row) {
        if (isset($row['data'][1]['data']['#managed_content_type'])) {
          $variables['table']['#rows'][$key]['class'][] = 'managed-content-type--' . str_replace('_', '-', $row['data'][1]['data']['#managed_content_type']);
        }
      }
    }
  }

  // Remove the drag handler if we are translating, if the field's cardinality
  // is 1 or if there are no content added. Passing through this will not
  // only remove the drag handler but also the order column that is empty when
  // no content is added and when the field is single value.
  if ((isset($variables['element']['#allow_reference_changes']) && !$variables['element']['#allow_reference_changes']) || (isset($variables['element']['#cardinality']) && $variables['element']['#cardinality'] == 1) || (isset($variables['table']['#rows']) && count($variables['table']['#rows']) == 0)) {
    if (isset($variables['table']['#tabledrag'])) {
      // Remove the tabledrag.
      unset($variables['table']['#tabledrag']);
      unset($variables['table']['#header'][1]);
      foreach ($variables['table']['#rows'] as $key => $value) {
        $variables['table']['#rows'][$key]['data'][0]['class'][] = 'managed-content-bullet';
        // Restore the removed weight and give access FALSE.
        $variables['table']['#rows'][$key]['data'][1]['data']['_weight'] = $value['data'][2]['data'];
        unset($variables['table']['#rows'][$key]['data'][2]);
        $variables['table']['#rows'][$key]['data'][1]['data']['_weight']['#access'] = FALSE;
      }
    }
  }
}
